from __future__ import annotations

from typing import Any, Dict, List, Optional, Tuple, Protocol


Selector = Dict[str, Any]
SemanticNode = Dict[str, Any]


class DesktopConnector(Protocol):  # pragma: no cover - interface
    def build_semantic_map(self, app: Optional[str] = None, max_depth: int = 4) -> SemanticNode: ...
    def find_element(self, selector: Selector, timeout_seconds: float = 3.0) -> Optional[Any]: ...
    def press(self, element: Any) -> bool: ...
    def set_value(self, element: Any, value: Any) -> bool: ...
    def focus_app(self, app: str) -> bool: ...
    def menu_select(self, path: List[str], app: Optional[str] = None, timeout_seconds: float = 3.0) -> bool: ...
    def scroll_to(self, selector: Selector, timeout_seconds: float = 3.0) -> bool: ...
    def wait_for(self, expect: Selector, state: Optional[Dict[str, Any]] = None, timeout_seconds: float = 3.0) -> bool: ...
    def get_element_bounds(self, element: Any) -> Tuple[float, float, float, float]: ...
